/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.smashtik.petstore.client.api;

import com.smashtik.petstore.client.ApiClient;
import com.smashtik.petstore.client.api.test.utils.PetUtils;
import com.smashtik.petstore.client.model.Pet;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import io.restassured.response.Response;

import org.apache.http.HttpStatus;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import java.io.File;
import java.util.List;

import static com.smashtik.petstore.client.GsonObjectMapper.gson;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;

/**
 * API tests for PetApi
 */
@Ignore
public class PetApiTest {

    private PetApi api;
    boolean debug = false;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder().setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("https://petstore.swagger.io/v2"))).pet();

        if(PetUtils.getPetsList().size()==0){
            getAllPets();
        }
    }


    /**
     * Invalid input
     */
    @Test
    public void shouldSee405AfterAddPet() {
        Pet body = PetUtils.createNewPet();
        Assert.assertFalse("No Pet Created",body.equals(null));
        api.addPet()
                .body(body).execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_METHOD_NOT_ALLOWED);;
    }


    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee400AfterDeletePet() {
        Long petId = -1000L;
        api.deletePet()
                .petIdPath(petId).execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_METHOD_NOT_ALLOWED);
    }

    /**
     * Pet not found
     */
    @Test
    public void shouldSee404AfterDeletePet() {
        Long petId = -1000L;
        String apiKey = null;
        api.deletePet()
                .petIdPath(petId).execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_NOT_FOUND);
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterFindPetsByStatus() {
        String status = Pet.StatusEnum.AVAILABLE.getValue();
        Response response = findPetsByStatus(status);
        response
                .then()
                .statusCode(HttpStatus.SC_OK);
        Assert.assertTrue("No Pets found",0< response.as(Pet[].class).length);
    }

    /**
     * Invalid status value
     */
    @Test
    public void shouldSee400AfterFindPetsByStatus() {
        String status = "test";
        api.findPetsByStatus()
                .statusQuery(status).execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_BAD_REQUEST);
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterFindPetsByTags() {
        String tags = null;
        api.findPetsByTags()
                .tagsQuery(tags).execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_OK);
    }

    /**
     * Invalid tag value
     */
    @Test
    public void shouldSee400AfterFindPetsByTags() {
        List<String> tags = null;
        api.findPetsByTags()
                .tagsQuery(tags).execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_BAD_REQUEST);
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterGetPetById() {
        Long petId = PetUtils.getRandomPet().getId();
        Response response = api.getPetById()
                .petIdPath(petId).execute(r -> r)
                .then()
                .statusCode(HttpStatus.SC_OK).extract().response();
        if(debug)System.out.println("RESPONSE: "+response.as(Pet.class).toString());
    }

    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee400AfterGetPetById() {
        Long petId = 0L;
        api.getPetById()
                .petIdPath(petId).execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_BAD_REQUEST);
    }

    /**
     * Pet not found
     */
    @Test
    public void shouldSee404AfterGetPetById() {
        Long petId = 0L;
        api.getPetById()
                .petIdPath(petId).execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_NOT_FOUND);
    }


    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee400AfterUpdatePet() {
        Pet body = PetUtils.modifyRandomPet();
        api.updatePet()
                .body(body).execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_BAD_REQUEST);
    }

    /**
     * Pet not found
     */
    @Test
    public void shouldSee404AfterUpdatePet() {
        Pet body = PetUtils.getRandomPet();
        body.setId(-10000L);
        api.updatePet()
                .body(body).execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_NOT_FOUND);
    }

    /**
     * Validation exception
     */
    @Test
    public void shouldSee405AfterUpdatePet() {
        Pet body = PetUtils.getRandomPet();
        body.setId(-10000L);
        api.updatePet()
                .body(body).execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_METHOD_NOT_ALLOWED);
    }


    /**
     * Invalid input
     */
    @Test
    public void shouldSee405AfterUpdatePetWithForm() {
        Long petId = PetUtils.getRandomPet().getId();
        String name = PetUtils.getRandomPet().getName();
        String status = PetUtils.getRandomPet().getStatus().getValue();
        api.updatePetWithForm()
                .petIdPath(petId)
                .nameForm(name+"&status="+status)
                .execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_METHOD_NOT_ALLOWED);
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterUploadFile() {
        Long petId = PetUtils.getRandomPet().getId();
        String additionalMetadata = PetUtils.getRandomPet().getName();
        File file = new File("src/test/resources/red_panda.jpg");
        api.uploadFile()
                .petIdPath(petId)
                .additionalMetadataForm(additionalMetadata)
                .fileMultiPart(file)
                .execute(r -> r.prettyPeek())
                .then()
                .statusCode(HttpStatus.SC_OK);
    }

    private void getAllPets() {
        PetUtils.addPets(findPetsByStatus(Pet.StatusEnum.AVAILABLE.getValue())
                .as(Pet[].class));
        PetUtils.addPets(findPetsByStatus(Pet.StatusEnum.SOLD.getValue())
                .as(Pet[].class));
        PetUtils.addPets(findPetsByStatus(Pet.StatusEnum.PENDING.getValue())
                .as(Pet[].class));
        Assert.assertTrue("No Pets",PetUtils.getPetsList().size()>=1);
    }

    private Response findPetsByStatus(String status) {
        if(debug){
            return api.findPetsByStatus()
                    .statusQuery(status).execute(r -> r.prettyPeek());
        }else{
            return api.findPetsByStatus()
                    .statusQuery(status).execute(r -> r);
        }
    }
}